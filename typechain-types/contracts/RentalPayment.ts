/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RentalPaymentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createRental"
      | "getRental"
      | "getRentalCount"
      | "owner"
      | "payRent"
      | "renounceOwnership"
      | "rentalCount"
      | "rentals"
      | "terminateRental"
      | "transferOwnership"
      | "usdc"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RentPaid"
      | "RentalCreated"
      | "RentalTerminated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createRental",
    values: [AddressLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRental",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payRent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateRental",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createRental",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRental", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRentalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rentalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateRental",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentPaidEvent {
  export type InputTuple = [
    rentalId: BigNumberish,
    tenant: AddressLike,
    amount: BigNumberish,
    paymentDate: BigNumberish
  ];
  export type OutputTuple = [
    rentalId: bigint,
    tenant: string,
    amount: bigint,
    paymentDate: bigint
  ];
  export interface OutputObject {
    rentalId: bigint;
    tenant: string;
    amount: bigint;
    paymentDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalCreatedEvent {
  export type InputTuple = [
    rentalId: BigNumberish,
    landlord: AddressLike,
    tenant: AddressLike,
    propertyDetails: string,
    monthlyRent: BigNumberish
  ];
  export type OutputTuple = [
    rentalId: bigint,
    landlord: string,
    tenant: string,
    propertyDetails: string,
    monthlyRent: bigint
  ];
  export interface OutputObject {
    rentalId: bigint;
    landlord: string;
    tenant: string;
    propertyDetails: string;
    monthlyRent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RentalTerminatedEvent {
  export type InputTuple = [rentalId: BigNumberish];
  export type OutputTuple = [rentalId: bigint];
  export interface OutputObject {
    rentalId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RentalPayment extends BaseContract {
  connect(runner?: ContractRunner | null): RentalPayment;
  waitForDeployment(): Promise<this>;

  interface: RentalPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createRental: TypedContractMethod<
    [
      _tenant: AddressLike,
      _propertyDetails: string,
      _monthlyRent: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getRental: TypedContractMethod<
    [_rentalId: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        landlord: string;
        tenant: string;
        propertyDetails: string;
        monthlyRent: bigint;
        startDate: bigint;
        endDate: bigint;
        nextPaymentDue: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getRentalCount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  payRent: TypedContractMethod<[_rentalId: BigNumberish], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rentalCount: TypedContractMethod<[], [bigint], "view">;

  rentals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        landlord: string;
        tenant: string;
        propertyDetails: string;
        monthlyRent: bigint;
        startDate: bigint;
        endDate: bigint;
        nextPaymentDue: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  terminateRental: TypedContractMethod<
    [_rentalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdc: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createRental"
  ): TypedContractMethod<
    [
      _tenant: AddressLike,
      _propertyDetails: string,
      _monthlyRent: BigNumberish,
      _startDate: BigNumberish,
      _endDate: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRental"
  ): TypedContractMethod<
    [_rentalId: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        landlord: string;
        tenant: string;
        propertyDetails: string;
        monthlyRent: bigint;
        startDate: bigint;
        endDate: bigint;
        nextPaymentDue: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRentalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "payRent"
  ): TypedContractMethod<[_rentalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rentalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rentals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        landlord: string;
        tenant: string;
        propertyDetails: string;
        monthlyRent: bigint;
        startDate: bigint;
        endDate: bigint;
        nextPaymentDue: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "terminateRental"
  ): TypedContractMethod<[_rentalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdc"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RentPaid"
  ): TypedContractEvent<
    RentPaidEvent.InputTuple,
    RentPaidEvent.OutputTuple,
    RentPaidEvent.OutputObject
  >;
  getEvent(
    key: "RentalCreated"
  ): TypedContractEvent<
    RentalCreatedEvent.InputTuple,
    RentalCreatedEvent.OutputTuple,
    RentalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RentalTerminated"
  ): TypedContractEvent<
    RentalTerminatedEvent.InputTuple,
    RentalTerminatedEvent.OutputTuple,
    RentalTerminatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RentPaid(uint256,address,uint256,uint256)": TypedContractEvent<
      RentPaidEvent.InputTuple,
      RentPaidEvent.OutputTuple,
      RentPaidEvent.OutputObject
    >;
    RentPaid: TypedContractEvent<
      RentPaidEvent.InputTuple,
      RentPaidEvent.OutputTuple,
      RentPaidEvent.OutputObject
    >;

    "RentalCreated(uint256,address,address,string,uint256)": TypedContractEvent<
      RentalCreatedEvent.InputTuple,
      RentalCreatedEvent.OutputTuple,
      RentalCreatedEvent.OutputObject
    >;
    RentalCreated: TypedContractEvent<
      RentalCreatedEvent.InputTuple,
      RentalCreatedEvent.OutputTuple,
      RentalCreatedEvent.OutputObject
    >;

    "RentalTerminated(uint256)": TypedContractEvent<
      RentalTerminatedEvent.InputTuple,
      RentalTerminatedEvent.OutputTuple,
      RentalTerminatedEvent.OutputObject
    >;
    RentalTerminated: TypedContractEvent<
      RentalTerminatedEvent.InputTuple,
      RentalTerminatedEvent.OutputTuple,
      RentalTerminatedEvent.OutputObject
    >;
  };
}
